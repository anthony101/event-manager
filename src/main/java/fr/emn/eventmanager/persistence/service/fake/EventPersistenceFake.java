/*
 * Created on 3 nov. 2014 ( Time 14:40:50 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package fr.emn.eventmanager.persistence.service.fake;

import java.util.List;
import java.util.Map;

import fr.emn.eventmanager.bean.Event;
import fr.emn.eventmanager.persistence.common.fake.GenericFakeService;
import fr.emn.eventmanager.persistence.service.EventPersistence;

/**
 * Fake persistence service implementation ( entity "Event" )
 *
 * @author Telosys Tools Generator
 */
public class EventPersistenceFake extends GenericFakeService<Event> implements EventPersistence {

	public EventPersistenceFake () {
		super(Event.class);
	}
	
	protected Event buildEntity(int index) {
		Event entity = new Event();
		// Init fields with mock values
		entity.setEventId( nextInteger() ) ;
		entity.setEventName( nextString() ) ;
		entity.setEventLocation( nextString() ) ;
		entity.setEventStartDatetime( nextDate() ) ;
		entity.setEventEndDatetime( nextDate() ) ;
		return entity ;
	}
	
	
	public boolean delete(Event entity) {
		log("delete ( Event : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( Integer eventId ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(Event entity) {
		log("insert ( Event : " + entity + ")" ) ;
	}

	public Event load( Integer eventId ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<Event> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<Event> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<Event> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public Event save(Event entity) {
		log("insert ( Event : " + entity + ")" ) ;
		return entity;
	}

	public List<Event> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
