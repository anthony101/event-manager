/*
 * Created on 3 nov. 2014 ( Time 14:40:50 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package fr.emn.eventmanager.persistence.service.fake;

import java.util.List;
import java.util.Map;

import fr.emn.eventmanager.bean.Participant;
import fr.emn.eventmanager.persistence.common.fake.GenericFakeService;
import fr.emn.eventmanager.persistence.service.ParticipantPersistence;

/**
 * Fake persistence service implementation ( entity "Participant" )
 *
 * @author Telosys Tools Generator
 */
public class ParticipantPersistenceFake extends GenericFakeService<Participant> implements ParticipantPersistence {

	public ParticipantPersistenceFake () {
		super(Participant.class);
	}
	
	protected Participant buildEntity(int index) {
		Participant entity = new Participant();
		// Init fields with mock values
		entity.setParticipantEventId( nextInteger() ) ;
		entity.setParticipantCustomerId( nextInteger() ) ;
		return entity ;
	}
	
	
	public boolean delete(Participant entity) {
		log("delete ( Participant : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( Integer participantEventId, Integer participantCustomerId ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(Participant entity) {
		log("insert ( Participant : " + entity + ")" ) ;
	}

	public Participant load( Integer participantEventId, Integer participantCustomerId ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<Participant> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<Participant> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<Participant> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public Participant save(Participant entity) {
		log("insert ( Participant : " + entity + ")" ) ;
		return entity;
	}

	public List<Participant> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
